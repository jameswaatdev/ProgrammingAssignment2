install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?ls
?list.files
args(list.files)
old.dir<-dir()
old.dir
info()
old.dir,-getwd()
old.dir<-getwd()
dir.create(testdir)
?dir.create
dir.create()
dir.create(dir.testdir)
dir.create(testdir)
dir.create(old.testdir)
dir.create(old.dir.testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
file.path(dir.create("testdir2"),dir.create("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=0.5)
my_sq<-seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
remove(my_sq)
length(my_seq)
seq(1,length(my_seq))
1:length(my_seq))
1:length(my_seq)
seq(1,length(my_seq))
info()
bye()
swirl()
library("swirl")
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
z<-rep(NA,1000)
bye()
z
rep(NA,4)
rnorm(10)
swirl()
my_data<-sample(c(y,z),100)
my_ma<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
bye()
is.na(x)
w<-is.na(x)
x[w]
x
install.packages("swirl")
library(sp)
library(maps)
library(maptools)
install.packages("sp")
install.packages("maps","maptools","leaflet","magritter","RODBC")
library(sp)
library(maps)
library(maptools)
library(leaflet)
library(magrittr)
library(RODBC)
install.packages("maps")
install.packages("maptools")
install.packages("leaflet")
install.packages("magritter")
install.packages("RODBC")
library(sp)
library(maps)
library(maptools)
library(leaflet)
library(magrittr)
library(RODBC)
uid <- readline("User id: ")
password <- readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
query1 <- readChar("Z:\\Reports\\Jason\\Alumni Relations\\class_1966_home_coordinates.sql", nchars=99999)
query2 <- readChar("Z:\\Reports\\Jason\\Alumni Relations\\class_2016_home_coordinates.sql", nchars=99999)
Class_1966 <- sqlQuery(connection, query1, errors=TRUE)
Class_1966 <- subset(Class_1966, complete.cases(Class_1966$LATITUDE))
Class_2016 <- sqlQuery(connection, query2, errors=TRUE)
Class_2016 <- subset(Class_2016, complete.cases(Class_2016$LATITUDE))
map <- leaflet(data = Class_1966) %>%
addProviderTiles("Esri.WorldStreetMap", options=providerTileOptions()) %>%
# options = providerTileOptions()%>%
# clearBounds() %>%
# setView(-75, 39, zoom = 5) %>% #default zoom for Philly Area
addLegend(position = 'topright', colors = "blue", labels = "Class of 1966", opacity = 1,
title = '') %>%
addCircleMarkers(~ LONGITUDE, ~ LATITUDE,
popup = paste(Class_1966$NAME, " -- ", Class_1966$QUERY_STRING), radius = 5,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = FALSE))
map
map <- leaflet() %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldStreetMap", group = "World Street Map") %>%
addLegend(position = 'topright', colors = c("red","blue"), labels = c("Class of 2016","Class of 1966"), opacity = 1,
title = '')%>%
addCircleMarkers(data = Class_1966,~ LONGITUDE, ~ LATITUDE, popup = paste(Class_1966$NAME, ", " , Class_1966$AFFILIATION, " -- ", Class_1966$QUERY_STRING),
color = "blue", stroke = F, opacity = 1, group = "1966")%>%
addCircleMarkers(data = Class_2016, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_2016$NAME, ", " , Class_2016$AFFILIATION,  " -- ", Class_2016$QUERY_STRING),
color = "red", stroke = F, opacity = 1, group = "2016")%>%
# Version using clustering - too busy!
#         addCircleMarkers(data = Class_1966, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_1966$NAME, " -- ", Class_1966$QUERY_STRING),
#                          color = "red", stroke = T,
#         clusterOptions = markerClusterOptions(), group = "1966")%>%
#         addCircleMarkers(data = Class_2016, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_2016$NAME, " -- ", Class_2016$QUERY_STRING),
#                          color = "red", stroke = T,
#                          clusterOptions = markerClusterOptions(), group = "2016")%>%
addLayersControl(
baseGroups = c("OSM (default)", "World Street Map"),
overlayGroups = c("2016", "1966"),
options = layersControlOptions(collapsed = FALSE)
)
map
install.packages("KernSmooth")
source('~/.active-rstudio-document')
TRUE && FALSE || 9 >= 4 && 3 < 6
TRUE && FALSE
9 >= 4 && 3 < 6
9 >= 4
3 < 6
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE && 6 >= 6
FALSE & 6 >= 6
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
identical(xor, 'xor')
xor(identical(xor, 'xor'), 7 == 7.0)
xor(!isTRUE(TRUE), 6 > -1)
xor(!!TRUE, !!FALSE)
xor(4 >= 9, 8 != 8.0)
8 != 8.0
4 >= 9
}
telegram("Hello")
telegram("A")
source('~/Coursera/Programming with R/telegram.R')
telegram("Hello")
telegram("Hello")
telegram("Hello")
source('~/Coursera/Programming with R/telegram.R')
telegram("Hello")
mad_libs
source('~/Coursera/Programming with R/mad_libs.R')
mad_libs(Philadelphia,angry,statue)
mad_libs("Philadelphia","angry","statue")
source('~/Coursera/Programming with R/mad_libs.R')
mad_libs("Philadelphia","angry","statue")
source('~/Coursera/Programming with R/bin_op.R')
"Good" %p% "job!"
source('~/Coursera/Programming with R/bin_op.R')
"Good" %p% "job!"
cube(3)
rm(list = ls())
clear()
}
source('~/Coursera/Programming with R/makepower.R')
cube <- make.power(3)
cube
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
square(3)
cube <- make.power(3)
cube(3)
square <- make.power(2)
square(2)
square(10)
?"environment"
ls(make.power)
ls(environment(make.power))
ls(environment(cube))
?get
get("n",environment(cube))
?"$"
source('~/Coursera/Programming with R/makepower.R')
rm(list = ls())
library(datasets)
data(iris)
?iris
head(iris, 10)
tapply(iris$Sepal.Length, iris$Species, summary)
setwd("~/Coursera/R Programming/Week 3 Loop Functions and Debugging")
source('~/Coursera/R Programming/Week 3 Loop Functions and Debugging/cachematrix.R')
source('~/Coursera/R Programming/Week 3 Loop Functions and Debugging/cachematrix.R')
